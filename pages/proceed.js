import Link from "next/link";
import { useEffect, useRef, useState } from "react";
import { formatEther, fromHex, parseEther } from "viem";
import {
  useAccount,
  useContractRead,
  useContractWrite,
  usePrepareContractWrite,
  useWaitForTransaction,
} from "wagmi";

import { abiNFTMarket, addressNFTMarket } from "../contracts";
import { useDebounce } from "../hooks/useDebounce";
import { formatEndDotsAddr, formatMidDotsAddr } from "../utils/formatAddress";
import { formatTxDate } from "../utils/formatDate";
import { toast } from "react-toastify";

export default function Proceed() {
  const ref = useRef(null);
  const { address: ownerAddr } = useAccount();
  const [transfers, setTransfers] = useState([]);
  const [proceeds, setProceeds] = useState("0.0");
  const [proceedsAmount, setProceedsAmount] = useState("0.0");
  const [isLoading, setIsLoading] = useState(true);

  const debouncedProceedsAmount = useDebounce(proceedsAmount, 500);

  // READ PROCEEDS
  useContractRead({
    address: addressNFTMarket,
    abi: abiNFTMarket,
    functionName: "getProceeds",
    args: [ownerAddr],
    onSuccess(ownerProceeds) {
      setProceeds(formatEther(ownerProceeds));
    },
  });

  const { config } = usePrepareContractWrite({
    address: addressNFTMarket,
    abi: abiNFTMarket,
    functionName: "withdrawProceeds",
    args: [parseEther(debouncedProceedsAmount)],
  });

  const { write: withdrawProceeds, data } = useContractWrite(config);

  const { isLoading: isLoadingWithdraw, isSuccess } = useWaitForTransaction({
    hash: data?.hash,
  });

  const getTransfers = async () => {
    setIsLoading(true);
    let resTransfers = await fetch(`/api/getTransfersForOwner/${ownerAddr}`);
    resTransfers = await resTransfers.json();
    setTransfers(resTransfers);
    setIsLoading(false);
  };

  useEffect(() => {
    if (isSuccess) {
      toast.success("Your funds were sent to your address!", {
        position: "top-right",
        autoClose: 5000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "dark",
      });
      setProceeds((proceeds - debouncedProceedsAmount).toFixed(2));
    }
  }, [isSuccess]);

  useEffect(() => {
    getTransfers();
  }, []);

  return (
    <>
      {isLoading && (
        <div className="relative px-10 top-0 left-0 text-white text-center text-xl font-bold flex flex-col justify-center items-center inset-0 z-50 h-full w-full">
          <lottie-player
            id="loadingMarketplaceNFTs"
            ref={ref}
            autoplay
            loop
            mode="normal"
            src="/animations/loading.json"
            style={{ width: "300px", height: "300px" }}
          ></lottie-player>
        </div>
      )}

      {!isLoading && (
        <div className="max-w-[1280px] flex lg:p-5 overflow-auto bg-slate-800">
          <div className="w-full flex flex-col md:p-6">
            <div className="mb-8">
              <h5 className="text-white mb-2 text-3xl font-bold tracking-tight">
                Withdraw your proceeds from your NFTs sales
              </h5>
              <p className="text-gray-400">
                Here you will be able to withdraw your income generated by the
                sales of your Emerald NFTs in the Emerald Trust market. The
                table will show the historical income you have received for each
                sale.{" "}
                <span className="font-bold text-yellow-600">
                  Including the sales already withdrawn.
                </span>
              </p>
            </div>

            <div className="w-full flex flex-col-reverse gap-6 lg:flex-row lg:justify-between">
              <div className="flex-1 relative overflow-x-auto rounded-lg">
                <table className="w-full text-sm text-left text-gray-300 rounded-lg overflow-hidden">
                  <caption class="p-5 text-lg font-semibold text-left text-white bg-slate-900">
                    Your sales history
                  </caption>
                  <thead className="text-xs  uppercase bg-slate-600 text-gray-300">
                    <tr>
                      <th scope="col" className="px-6 py-3">
                        Tx Hash
                      </th>
                      <th scope="col" className="px-6 py-3">
                        NFT name
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Buyer
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Price
                      </th>
                      <th scope="col" className="px-6 py-3">
                        Date
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {transfers.map((transfer, index) => (
                      <tr
                        key={index}
                        className="border-b bg-slate-900 border-gray-700 hover:bg-slate-800"
                      >
                        <th
                          scope="row"
                          className="px-6 py-4 font-medium whitespace-nowrap text-white"
                        >
                          <Link
                            className="text-emerald-500 hover:text-emerald-300"
                            href={`https://mumbai.polygonscan.com/tx/${transfer.transactionHash}`}
                            target="_blank"
                          >
                            {formatMidDotsAddr(transfer.transactionHash)}
                          </Link>
                        </th>
                        <td className="px-6 py-4 max-w-[200px] truncate">
                          {transfer.title}
                        </td>
                        <td className="px-6 py-4">
                          <Link
                            className="text-emerald-500 hover:text-emerald-300"
                            href={`https://mumbai.polygonscan.com/address/${transfer.to}`}
                            target="_blank"
                          >
                            {formatEndDotsAddr(transfer.to)}
                          </Link>
                        </td>
                        <td className="px-6 py-4">
                          {formatEther(fromHex(transfer.value, "number"))}{" "}
                          <span className="text-xs">MATIC</span>
                        </td>
                        <td className="px-6 py-4 min-w-fit">
                          {formatTxDate(transfer.timeLastUpdated)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              <div className="flex flex-col md:max-w-xl text-white p-6 bg-slate-900 border border-gray-800 rounded-lg max-h-[270px]">
                <div>
                  <span className="tracking-wide text-gray-300 text-xs font-bold">
                    Available proceeds
                  </span>
                  {/* <Image src={ethIcon} width={32} height={32} alt={`Ethereum`} /> */}
                  <p className="text-2xl font-bold text-emerald-600">
                    {proceeds} MATIC
                  </p>
                </div>

                <hr className="my-4 h-0.5 border-t-0 bg-gray-600 opacity-50" />

                <form className="flex flex-col gap-2 w-full max-w-lg overflow-hidden">
                  <label
                    className="block tracking-wide text-gray-300 text-xs font-bold"
                    htmlFor="nft-buy-amount"
                  >
                    Amount to withdraw
                  </label>
                  <input
                    className="w-full appearance-none text-white bg-slate-900  border border-slate-600 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-slate-800"
                    id="nft-buy-amount"
                    type="number"
                    placeholder="10"
                    step="0.01"
                    min="0.0"
                    max={proceeds}
                    onChange={(e) => setProceedsAmount(e.target.value)}
                    value={proceedsAmount}
                  />
                </form>

                <button
                  disabled={
                    isLoadingWithdraw ||
                    proceedsAmount <= 0 ||
                    proceedsAmount > proceeds
                  }
                  onClick={withdrawProceeds}
                  className="w-full bg-emerald-600 hover:bg-emerald-500 text-white font-bold py-2 px-4 rounded-xl mt-4 disabled:bg-emerald-300"
                >
                  {isLoadingWithdraw
                    ? "Transferring proceeds..."
                    : "Withdraw Proceeds"}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
